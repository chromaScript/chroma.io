chromaScript Grammar

//-----------------------------------------------------------------

Grammar Notation:		Code Representation:
Terminal				Code to match and consume a token
Nonterminal				Call to that rule's function
|						if or switch statement
* or +					while or for loop
?						if statement
~( Condition )			conditional	
< Type >				implicit type cast

//-----------------------------------------------------------------
program				-> declaration* EOF ;

declaration			-> classDecl | constructorDecl | explicitCastDecl | funcDecl | varDecl | arrayDecl 
					| namespaceDecl | statement ;
classDecl			-> "class" IDENTIFIER "{" ( constructorDecl | explicitCastDecl | funcDecl )* "}" ;
constructorDecl		-> "constructor" "(" parameters? ")" "{" declaration* "}" ;
explicitCastDecl	-> "cast" "<" returnType ">" "{" declaration* returnStmt "}" ;
funcDecl			-> returnType IDENTIFIER 
					"(" parameters? ")" "{" declaration* returnStmt~(returnType != "void") "}" ;
parameters			-> varType IDENTIFIER ( "," varType IDENTIFIER )* ;
arrayDecl			->"array" varType IDENTIFIER ( "={" ( "," expression )* "}" )? ";" ;
varDecl				-> varType IDENTIFIER ( "=" expression )? ";" ;
namespaceDecl		-> "namespace" IDENTIFIER "{" declaration* "}" ;

statement			-> printStmt
					| returnStmt
					| breakStmt
					| continueStmt
					| tryCatchStmt
					| ifStmt
					| whileStmt
					| forStmt
					| foreachStmt
					| exprStmt
					| blockStmt ;
					
printStmt			-> "print" expression ";" ;
returnStmt			-> "return" expression? ";" ;
breakStmt			-> "break" ";" ;
continueStmt		-> "continue" ";" ;
tryCatchStmt		-> "try" block "catch" block ;
ifStmt				-> "if" "(" expression ")" statement* ( "else" statement* )? ;
whileStmt			-> "while" "(" expression ")" statement* ;
forStmt				-> "for" "(" ( varDecl | exprStmt | ";" )
					expression? ";"
					expression? ")" statement* ;
foreachStmt			-> "foreach" "(" varDecl ":" expression ")" statement* ;
exprStmt			-> expression ";" ;
blockStmt				-> "{" declaration* "}" ;

expression			-> assignment ;
assignment			-> ( call "." )? IDENTIFIER ( "=" | "+=" | "-=" | "*=" | "/=" ) assignment
					| logic_or ;
logic_or			-> logic_and ( "||" logic_and )* ;
logic_and			-> equality ( "&&" equality )* ;
equality			-> comparison ( ( "!=" | "==" ) comparison )* ;
comparison			-> approximate | ( term ( ( ">" | ">=" | "<" | "<=" ) term )* ) ;
approximate			-> term "~=(" <NUM>expression ")" term ;
term				-> factor ( ( "-" | "+" ) factor )* ;
factor				-> exponent ( ( "/" | "*" ) exponent )* ;
exponent			-> scope ( ( "**" ) scope )* ;
scope				-> ( IDENTIFIER ( "::" IDENTIFIER )* ) typecast
					| typecast;
typecast			-> "<" returnType ">" instanceOf 
					| instanceOf ;
instanceOf			-> "?(" unary ")" unary 
					| unary ;
unary				-> ( "!" | "-" ) call  
					| call ;
call				-> primary ( "(" arguments? ")" ( "[" <NUM>expression "]" )? | "." IDENTIFIER )* ;
arguments			-> expression ( "," expression )* ;
primary				->  NUM | vector | STR | "true" | "false" | "nil" 
					| "(" expression ")" 
					| IDENTIFIER ( "[" <NUM>expression "]" )? ;
vector				-> "({" <NUM>expression "," <NUM>expression ( "," <NUM>expression )? ( "," <NUM>expression )? "})"

varType				-> "num" | "vec2" | "vec3" | "vec4" | "string" | "bool" | ( "var" | "auto" ) | IDENTIFIER | "void" ;
returnType			-> "num" | "vec2" | "vec3" | "vec4" | "string" | "bool" | IDENTIFIER | "void" ;
					
//-----------------------------------------------------------------

Name:			Operators:		Associates:
Equality		== !=			Left
Comparison		> >= < <=
				~=() ?()		Left
Term			- +				Left
Factor			/ *				Left
Exponent		**				Left
Unary			! -				Right

//------------------------------------------------------------------

chromaLayout

//------------------------------------------------------------------

layoutSheet			-> declaration* EOF ;

declaration			-> rootStmt | prototypeStmt ;

rootStmt			-> "<" "ROOT" (rootAttribType "=" '"' VALUE '"' )* ">" 
							element* 
						"</" "ROOT" ">" ;
prototypeStmt		-> "<" "PROTO" attribute* ">" element* "</" "PROTO" ">" ; 

element				-> "<" =widgetType attribute* ">" elementStmt* "</" =widgetType ">" ;

attribute			-> attributeType "=" field ";"
field				-> '"' VALUE  | term '"' ;

headerAttribType	-> "default_position" | "save_position" | "script" ;

widgetType			-> "H_BOX" | "V_BOX" | "PANEL" | "IMAGE" | "TEXT" ;

attributeType		-> "id" | "class" | "name" | "style" | "value" | "img" | "group" | "innerContent" |
					"onblur" | "onfocus" | "oncli	ck" | "onrightclick" | "ondblclick" |
					"ondblrightclick" | "ondrag" | "ondragstart" | "ondragend" |
					"ondragenter" | "ondragover" | "ondragleave" | "ondrop" |
					"onkeydown" | "onkeypress" | "onkeyup" | "onload" | "oncopy" | "onpaste" | "oncut" |
					"onmouseover" | "onmouseenter" | "onmouseleave" | "onmousewheelup" | "onmousewheeldown" |
					"onresize" | "draggable" | "droppable" | "dragType" | "dropType" ;

//------------------------------------------------------------------

chromaStyle

//------------------------------------------------------------------

styleSheet			-> declaration* EOF ;

declaration			-> scriptStmt | styleStmt ;
scriptStmt			-> "script" "{" "$" chromaScript "$" "}" ;
styleStmt			-> selector? IDENTIFIER inheritance? "{" property* "}" ;

inheritance			-> ( ":" IDENTIFIER )*
property			-> propertyType ":" VALUE | "$" chromaScript "$" ( "," VALUE | "$" chromaScript "$" )?* ";" ;

selector			-> "#" | "." | "*" ;
propertyType		-> "min-width" | "min-height" | "margin" | "margin-top" | "margin-left" | "margin-right" |
					"margin-top" | "margin-bottom" | "float" | "background-color" | "font-path" | "font-size" |
					"background-texture" | "border" | "border-left" | "border-right" | "border-top" | "border-bottom" |
					"overflow" | "overflow-X" | "overflow-Y" | "position" | "box-shadow-size" | "box-shadow-color" |
					"top" | "bottom" | "left" | "right" | "max-width" | "max-height"