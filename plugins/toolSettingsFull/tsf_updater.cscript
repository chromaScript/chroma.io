void updateToolData()
{
	app.ui.getWidget_byID("tsf_interestWrapper").setChildProperty_byClass("tsf_interest", "visibility", "hidden");
	num savedPage = app.toolbox.getActiveToolProp(41, -1, false, false);
		
	update_meta();
	update_control();
	update_inputs();
	update_basic();
	update_image();
	update_character();
	update_alpha();
	update_color();
	update_scatter();
	update_effects();
}

void update_meta()
{
	app.ui.getWidget_byID("tsf_interestMetadata").setProperty("visibility", "visible");
	
	if (tsf_currentSettingsPage == 0)
	{
		app.ui.getWidget_byID("tsf_bodyMetadata").setProperty("visibility", "visible");
		if (true) // If the page is dirty, update it
		{
			// Text and ID Data
			app.ui.getWidget_byID("tsf_meta_ID").setProperty("value", toString(app.toolbox.getActiveToolProp(0, -1, false, false)));
			app.ui.getWidget_byID("tsf_meta_name").setProperty("value", app.toolbox.getActiveToolProp(3, -1, false, false));
			app.ui.getWidget_byID("tsf_meta_category").setProperty("value", app.toolbox.getActiveToolProp(16, -1, false, false));
			app.ui.getWidget_byID("tsf_meta_date").setProperty("value", app.toolbox.getActiveToolProp(18, -1, false, false));
			app.ui.getWidget_byID("tsf_meta_author").setProperty("value", app.toolbox.getActiveToolProp(19, -1, false, false));
			
			// Tool Data
			num bindType = app.toolbox.getActiveToolProp(20, -1, false, false);
			// print bindType;
			if (bindType == 0)
			{
				clickDropOption(5, "STANDARD", false);
				app.ui.getWidget_byID("tsf_meta_keyStandard").setProperty("value", app.toolbox.getActiveToolProp(21, -1, false, false));
			}
			else if (bindType == 1)
			{
				clickDropOption(5, "ALPHABET", false);
			}
			else if (bindType == 2)
			{
				clickDropOption(5, "SWITCH", false);
			}
			app.ui.getWidget_byID("tsf_meta_cursorHover").setProperty("value", app.toolbox.getActiveToolProp(24, -1, false, false));
			app.ui.getWidget_byID("tsf_meta_cursorPress").setProperty("value", app.toolbox.getActiveToolProp(25, -1, false, false));
			
			// Input / Output / Control / SubControl
			inputStore = app.toolbox.getActiveToolProp(30, -1, false, false);
			app.ui.getWidget_byID("tsf_meta_inputMethod").setProperty("value", inputStore);
			outputStore = app.toolbox.getActiveToolProp(31, -1, false, false);
			app.ui.getWidget_byID("tsf_meta_outputMethod").setProperty("value", outputStore);
		}
	}
}

void update_control()
{
	string controlMode = app.toolbox.getActiveToolProp(32, -1, false, false);
	if (controlMode == "CONTINUOUS") { update_continuous(); }
	if (controlMode == "DRAG") { update_drag(); }
	if (controlMode == "ONE POINT") { update_onepoint(); }
	if (controlMode == "TWO POINT") { update_twopoint(); }
	if (controlMode == "THREE POINT") { update_threepoint(); }
	if (controlMode == "ZOOM") { update_zoom(); }
	if (controlMode == "PAN") { update_pan(); }
	if (controlMode == "ROTATE") { update_rotate(); }
	if (controlMode == "SAMPLER") { update_sampler(); }
}

void update_inputs()
{
	string inputType = app.toolbox.getActiveToolProp(30, -1, false, false);
	if (inputType == "RAKE") { update_rake(); }
}

void update_zoom()
{
	if (app.toolbox.checkActiveToolSettingsMask("zoom"))
	{
		app.ui.getWidget_byID("tsf_interestControl_zoom").setProperty("visibility", "visible");
		
		if (tsf_currentSettingsPage == 6)
		{
			app.ui.getWidget_byID("tsf_bodyControl_zoom").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				// Zoom Factor Sliders
				global::update_tSetSliderSingle("tsf_zoom_sliderBox_accIn", 
					"tsf_zoom_slider_accIn", "tsf_zoom_accIn", 201, -1);
				global::update_tSetSliderSingle("tsf_zoom_sliderBox_accOut", 
					"tsf_zoom_slider_accOut", "tsf_zoom_accOut", 202, -1);
				
				// Zoom Speed
				global::update_tSetSliderSingle("tsf_zoom_sliderBox_speed", 
					"tsf_zoom_slider_speed", "tsf_zoom_speed", 203, -1);
				
				// Zoom Step Amount
				app.ui.getWidget_byID("tsf_zoom_numVarField").setProperty("value", app.toolbox.getActiveToolProp(210, -1, false, false));	
				
				// Click Targeting
				global::update_tSetToggle("tsf_zoom_tog_clickTar", 204, -1);
				
				// Animated Zoom
				global::update_tSetToggle("tsf_zoom_tog_animZoom", 205, -1);
				global::update_tSetSliderSingle("tsf_zoom_sliderBox_animSpeed", 
					"tsf_zoom_slider_animSpeed", "tsf_zoom_animSpeed", 206, -1);
			}
		}
		else if (tsf_currentSettingsPage != 6 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10)
		{
			tsf_clickInterest(6, "tsf_interestControl_zoom");
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestControl_zoom").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage != 6 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10) { 
			tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_rotate()
{
	if (app.toolbox.checkActiveToolSettingsMask("rotate"))
	{
		app.ui.getWidget_byID("tsf_interestControl_rotate").setProperty("visibility", "visible");
		
		if (tsf_currentSettingsPage == 8)
		{
			app.ui.getWidget_byID("tsf_bodyControl_rotate").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				// Rotate Speed Sliders
				global::update_tSetToggle("tsf_rotate_tog_aboutCursor", 300, -1);
				global::update_tSetSliderSingle("tsf_rotate_sliderBox_speed", 
					"tsf_rotate_slider_speed", "tsf_rotate_speed", 301, -1);
				
				// Snap Key Angles
				app.ui.getWidget_byID("tsf_rotate_angleA").setProperty("value", 
					app.toolbox.getActiveToolProp(311, -1, false, false));
				app.ui.getWidget_byID("tsf_rotate_angleB").setProperty("value", 
					app.toolbox.getActiveToolProp(313, -1, false, false));
				app.ui.getWidget_byID("tsf_rotate_angleC").setProperty("value", 
					app.toolbox.getActiveToolProp(315, -1, false, false));
				app.ui.getWidget_byID("tsf_rotate_snapKeyA").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(310, -1, false, false)));
				app.ui.getWidget_byID("tsf_rotate_snapKeyB").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(312, -1, false, false)));
				app.ui.getWidget_byID("tsf_rotate_snapKeyC").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(314, -1, false, false)));	
					
				// Snap Tolerance
				global::update_tSetSliderSingle("tsf_rotate_sliderBox_snapToleranceA", 
					"tsf_rotate_slider_snapToleranceA", "tsf_rotate_snapToleranceA", 301, -1);
			}
		}
		else if (tsf_currentSettingsPage != 8 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10)
		{
			tsf_clickInterest(8, "tsf_interestControl_rotate");
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestControl_rotate").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage != 8 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10) { 
			tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_pan()
{
	if (app.toolbox.checkActiveToolSettingsMask("pan"))
	{
		app.ui.getWidget_byID("tsf_interestControl_pan").setProperty("visibility", "visible");
		if (tsf_currentSettingsPage == 7)
		{
			app.ui.getWidget_byID("tsf_bodyControl_pan").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				//
				global::update_tSetToggle("tsf_pan_tog_constrainCanvas", 100, -1);
				global::update_tSetToggle("tsf_pan_tog_constrainRelative", 101, -1);
				global::update_tSetSliderSingle("tsf_pan_sliderBox_constrainAmount", 
					"tsf_pan_slider_constrainAmount", "tsf_pan_constrainAmount", 102, -1);
				//
				
				global::update_tSetToggle("tsf_pan_tog_flickPanning", 110, -1);
				global::update_tSetSliderSingle("tsf_pan_sliderBox_friction", 
					"tsf_pan_slider_friction", "tsf_pan_friction", 111, -1);
					
				global::update_tSetSliderSingle("tsf_pan_sliderBox_force", 
					"tsf_pan_slider_force", "tsf_pan_force", 112, -1);
				
				//
				global::update_tSetSliderSingle("tsf_pan_sliderBox_speed", 
					"tsf_pan_slider_speed", "tsf_pan_speed", 113, -1);
				
				app.ui.getWidget_byID("tsf_pan_slowKey").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(116, -1, false, false)));
	
				global::update_tSetSliderSingle("tsf_pan_sliderBox_slowFactor", 
					"tsf_pan_slider_slowFactor", "tsf_pan_slowFactor", 117, -1);
					
				//
				global::update_tSetToggle("tsf_pan_tog_clickTarget", 120, -1);
				
				app.ui.getWidget_byID("tsf_pan_clickTarKey").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(122, -1, false, false)));
				//
				global::update_tSetToggle("tsf_pan_tog_lockX", 130, -1);
				app.ui.getWidget_byID("tsf_pan_lockXKey").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(131, -1, false, false)));

				global::update_tSetToggle("tsf_pan_tog_lockY", 132, -1);
				app.ui.getWidget_byID("tsf_pan_lockYKey").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(133, -1, false, false)));
					
				global::update_tSetToggle("tsf_pan_tog_lockAngle", 134, -1);
				app.ui.getWidget_byID("tsf_pan_angleLockKey").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(136, -1, false, false)));
					
				global::update_tSetSliderSingle("tsf_pan_sliderBox_angleLock", 
					"tsf_pan_slider_angleLock", "tsf_pan_angleLock", 135, -1);
				
			}
		}
		else if (tsf_currentSettingsPage != 7 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10)
		{
			tsf_clickInterest(7, "tsf_interestControl_pan");
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestControl_pan").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage != 7 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10) { 
			tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_sampler()
{
	if (app.toolbox.checkActiveToolSettingsMask("sampler"))
	{
		app.ui.getWidget_byID("tsf_interestControl_sampler").setProperty("visibility", "visible");
		if (tsf_currentSettingsPage == 9)
		{
			app.ui.getWidget_byID("tsf_bodyControl_sampler").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				app.ui.getWidget_byID("tsf_sampler_sampleBGKey").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(928, -1, false, false)));
				app.ui.getWidget_byID("tsf_sampler_sampleTypeText").setProperty("value", app.toolbox.getActiveToolProp(900, -1, false, false));
				app.ui.getWidget_byID("tsf_sampler_shapeTypeText").setProperty("value", app.toolbox.getActiveToolProp(901, -1, false, false));
				global::update_tSetSliderSingle("tsf_sampler_sliderBox_size", 
					"tsf_sampler_slider_size", "tsf_sampler_size", 902, -1);
					
				app.ui.getWidget_byID("tsf_sampler_fgTypeText").setProperty("value", app.toolbox.getActiveToolProp(937, -1, false, false));
				update_tSetToggle("tsf_sampler_tog_fgDynamics", 929, -1);
				update_tSetToggle("tsf_sampler_tog_fgControlRed", 930, 1);
				update_tSetToggle("tsf_sampler_tog_fgNoiseRed", 934, 1);
				update_tSetToggle("tsf_sampler_tog_fgControlGreen", 931, 1);
				update_tSetToggle("tsf_sampler_tog_fgNoiseGreen", 935, 1);
				update_tSetToggle("tsf_sampler_tog_fgControlBlue", 932, 1);
				update_tSetToggle("tsf_sampler_tog_fgNoiseBlue", 936, 1);
				
				update_tSetToggle("tsf_sampler_tog_autoUpdateBG", 940, -1);
				update_tSetToggle("tsf_sampler_tog_copyFGLast", 944, -1);
				
				global::update_tSetSliderSingle("tsf_sampler_sliderBox_bgHueOffset", 
					"tsf_sampler_slider_bgHueOffset", "tsf_sampler_bgHueOffset", 941, -1);
				global::update_tSetSliderSingle("tsf_sampler_sliderBox_bgSatOffset", 
					"tsf_sampler_slider_bgSatOffset", "tsf_sampler_bgSatOffset", 942, -1);
				global::update_tSetSliderSingle("tsf_sampler_sliderBox_bgValueOffset", 
					"tsf_sampler_slider_bgValueOffset", "tsf_sampler_bgValueOffset", 943, -1);
					
				app.ui.getWidget_byID("tsf_sampler_bgTypeText").setProperty("value", app.toolbox.getActiveToolProp(957, -1, false, false));
				update_tSetToggle("tsf_sampler_tog_bgControlRed", 950, 1);
				update_tSetToggle("tsf_sampler_tog_bgNoiseRed", 954, 1);
				update_tSetToggle("tsf_sampler_tog_bgControlGreen", 951, 1);
				update_tSetToggle("tsf_sampler_tog_bgNoiseGreen", 955, 1);
				update_tSetToggle("tsf_sampler_tog_bgControlBlue", 952, 1);
				update_tSetToggle("tsf_sampler_tog_bgNoiseBlue", 956, 1);
				
				update_tSetToggle("tsf_sampler_tog_paletteConstrain", 960, 1);
				app.ui.getWidget_byID("tsf_sampler_paletteTypeText").setProperty("value", app.toolbox.getActiveToolProp(961, -1, false, false));
				app.ui.getWidget_byID("tsf_sampler_paletteModeTypeText").setProperty("value", app.toolbox.getActiveToolProp(968, -1, false, false));
				
				update_tSetSliderDouble("tsf_sampler_sliderBox_palHue", 
					"tsf_sampler_slider_palHueMin", "tsf_sampler_palHueMin", "tsf_sampler_slider_palHueMax", "tsf_sampler_palHueMax",
					962, -1, 963, -1);
				update_tSetSliderDouble("tsf_sampler_sliderBox_palSat", 
					"tsf_sampler_slider_palSatMin", "tsf_sampler_palSatMin", "tsf_sampler_slider_palSatMax", "tsf_sampler_palSatMax",
					964, -1, 965, -1);
				update_tSetSliderDouble("tsf_sampler_sliderBox_palVal", 
					"tsf_sampler_slider_palValMin", "tsf_sampler_palValMin", "tsf_sampler_slider_palValMax", "tsf_sampler_palValMax",
					966, -1, 967, -1);
			}
		}
		else if (tsf_currentSettingsPage != 9 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10)
		{
			tsf_clickInterest(9, "tsf_interestControl_sampler");
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestControl_sampler").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage != 9 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10) { 
			tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_continuous()
{
	if (app.toolbox.checkActiveToolSettingsMask("continuous"))
	{
		app.ui.getWidget_byID("tsf_interestControl_continuous").setProperty("visibility", "visible");
		if (tsf_currentSettingsPage == 1)
		{
			app.ui.getWidget_byID("tsf_bodyControl_continuous").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				// Spacing
				global::update_tSetSliderSingle("tsf_cont_sliderBox_spacing", 
					"tsf_cont_slider_spacing", "tsf_cont_spacing", 415, -1);
				global::update_tSetToggle("tsf_cont_tog_relativeSpacing", 416, -1);
				global::update_tSetToggle("tsf_cont_tog_useCanvas", 417, -1);
				
				// Default Mode / Key Settings
				
				app.ui.getWidget_byID("tsf_cont_defaultModeText").setProperty("value", app.toolbox.getActiveToolProp(400, -1, false, false));
				app.ui.getWidget_byID("tsf_cont_altModeKey").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(401, -1, false, false)));
				
				global::update_tSetToggle("tsf_cont_tog_altSnapA", 418, -1);
				
				app.ui.getWidget_byID("tsf_cont_altSnapKeyA").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(402, -1, false, false)));
				app.ui.getWidget_byID("tsf_cont_altSnapA").setProperty("value", 
					app.toolbox.getActiveToolProp(403, -1, false, false));
					
				global::update_tSetToggle("tsf_cont_tog_altSnapB", 419, -1);
				app.ui.getWidget_byID("tsf_cont_altSnapKeyB").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(404, -1, false, false)));
				app.ui.getWidget_byID("tsf_cont_altSnapB").setProperty("value", 
					app.toolbox.getActiveToolProp(405, -1, false, false));
				
				global::update_tSetToggle("tsf_cont_tog_altSubdivide", 406, -1);
				global::update_tSetSliderSingle("tsf_cont_sliderBox_pressureBoost", 
					"tsf_cont_slider_pressureBoost", "tsf_cont_pressureBoost", 407, -1);
				global::update_tSetSliderSingle("tsf_cont_sliderBox_subdivAmount", 
					"tsf_cont_slider_subdivAmount", "tsf_cont_subdivAmount", 409, -1);
					
				global::update_tSetToggle("tsf_cont_tog_closeShape", 408, -1);
				global::update_tSetToggle("tsf_cont_tog_scatterConnect", 411, -1);
				
				app.ui.getWidget_byID("tsf_cont_connectLastKey").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(410, -1, false, false)));
				
				// Constraint Threshold
				app.ui.getWidget_byID("tsf_cont_slider_constraintThreshold").setProperty("left", 
					app.toolbox.getActiveToolProp(440, -1, true, false) * (currentMaxLeft - tsf_inputSlider_minMax_width));
				app.ui.getWidget_byID("tsf_cont_constraintThreshold").setProperty("value", 
					app.toolbox.getActiveToolProp(440, -1, false, false));
				
				// Constraint Keys Angles
				app.ui.getWidget_byID("tsf_cont_constraintA").setProperty("value", 
					app.toolbox.getActiveToolProp(442, -1, false, false));
				app.ui.getWidget_byID("tsf_cont_constraintB").setProperty("value", 
					app.toolbox.getActiveToolProp(446, -1, false, false));
				app.ui.getWidget_byID("tsf_cont_constraintC").setProperty("value", 
					app.toolbox.getActiveToolProp(451, -1, false, false));
				app.ui.getWidget_byID("tsf_cont_constraintD").setProperty("value", 
					app.toolbox.getActiveToolProp(456, -1, false, false));
				app.ui.getWidget_byID("tsf_cont_constraintKeyA").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(443, -1, false, false)));
				app.ui.getWidget_byID("tsf_cont_constraintKeyB").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(447, -1, false, false)));
				app.ui.getWidget_byID("tsf_cont_constraintKeyC").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(452, -1, false, false)));
				app.ui.getWidget_byID("tsf_cont_constraintKeyD").setProperty("value", 
					keybindToString(app.toolbox.getActiveToolProp(457, -1, false, false)));
				global::update_tSetToggle("tsf_cont_tog_constraintA", 441, -1);
				global::update_tSetToggle("tsf_cont_tog_constraintB", 445, -1);
				global::update_tSetToggle("tsf_cont_tog_constraintC", 450, -1);
				global::update_tSetToggle("tsf_cont_tog_constraintD", 455, -1);
				
				// Scattering
				update_tSetToggle("tsf_cont_tog_angleEnable", 434, 1);
				update_tSetToggle("tsf_cont_tog_useDir", 435, 1);
				
				global::update_tSetSliderSingle("tsf_cont_sliderBox_angleOffset", 
					"tsf_cont_slider_angleOffset", "tsf_cont_angleOffset", 436, -1);
				update_tSetToggle("tsf_cont_tog_dirRelative", 437, 1);
				
				update_tSetToggle("tsf_cont_tog_angleControl", 420, 1);
				update_tSetToggle("tsf_cont_tog_angleNoise", 422, 1);
				update_tSetSliderDouble("tsf_cont_sliderBox_angle", 
					"tsf_cont_slider_angleMin", "tsf_cont_angleMin", "tsf_cont_slider_angleMax", "tsf_cont_angleMax", 
					420, 3, 420, 4);
					
				update_tSetToggle("tsf_cont_tog_distXControl", 423, 1);
				update_tSetToggle("tsf_cont_tog_distXNoise", 425, 1);
				update_tSetSliderDouble("tsf_cont_sliderBox_distX", 
					"tsf_cont_slider_distXMin", "tsf_cont_distXMin", "tsf_cont_slider_distXMax", "tsf_cont_distXMax", 
					423, 3, 423, 4);
					
				update_tSetToggle("tsf_cont_tog_distYControl", 426, 1);
				update_tSetToggle("tsf_cont_tog_distYNoise", 428, 1);
				update_tSetSliderDouble("tsf_cont_sliderBox_distY", 
					"tsf_cont_slider_distYMin", "tsf_cont_distYMin", "tsf_cont_slider_distYMax", "tsf_cont_distYMax", 
					426, 3, 426, 4);
					
				update_tSetToggle("tsf_cont_tog_countControl", 429, 1);
				update_tSetToggle("tsf_cont_tog_countNoise", 431, 1);
				update_tSetSliderDouble("tsf_cont_sliderBox_count", 
					"tsf_cont_slider_countMin", "tsf_cont_countMin", "tsf_cont_slider_countMax", "tsf_cont_countMax", 
					429, 3, 429, 4);
				
				// Connection Type
				app.ui.getWidget_byID("tsf_cont_connectTypeText").setProperty("value", app.toolbox.getActiveToolProp(432, -1, false, false));
				global::update_tSetSliderSingle("tsf_cont_sliderBox_connectInterval", 
					"tsf_cont_slider_connectInterval", "tsf_cont_connectInterval", 433, -1);
			}
		}
		else if (tsf_currentSettingsPage != 1 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10)
		{
			tsf_clickInterest(1, "tsf_interestControl_continuous");
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestControl_continuous").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage != 1 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10) { 
			tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_drag()
{
	if (app.toolbox.checkActiveToolSettingsMask("drag"))
	{
		app.ui.getWidget_byID("tsf_interestControl_drag").setProperty("visibility", "visible");
		if (tsf_currentSettingsPage == 2)
		{
			// app.ui.getWidget_byID("tsf_bodyControl_drag").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				// currentMaxLeft = app.ui.getWidget_byID("tsf_cont_sliderBox_spacing").getProperty("size-X");
			}
		}
		else if (tsf_currentSettingsPage != 2 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10)
		{
			tsf_clickInterest(2, "tsf_interestControl_drag");
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestControl_continuous").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage != 2 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10) { 
			tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_onepoint()
{
	if (app.toolbox.checkActiveToolSettingsMask("onepoint"))
	{
		app.ui.getWidget_byID("tsf_interestControl_onePoint").setProperty("visibility", "visible");
		if (tsf_currentSettingsPage == 3)
		{
			// app.ui.getWidget_byID("tsf_bodyControl_onePoint").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				//currentMaxLeft = app.ui.getWidget_byID("tsf_cont_sliderBox_spacing").getProperty("size-X");
			}
		}
		else if (tsf_currentSettingsPage != 3 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10)
		{
			tsf_clickInterest(3, "tsf_interestControl_onePoint");
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestControl_onePoint").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage != 3 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10) { 
			tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_twopoint()
{
	if (app.toolbox.checkActiveToolSettingsMask("twopoint"))
	{
		app.ui.getWidget_byID("tsf_interestControl_twoPoint").setProperty("visibility", "visible");
		if (tsf_currentSettingsPage == 4)
		{
			// app.ui.getWidget_byID("tsf_bodyControl_onePoint").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				//currentMaxLeft = app.ui.getWidget_byID("tsf_cont_sliderBox_spacing").getProperty("size-X");
			}
		}
		else if (tsf_currentSettingsPage != 4 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10)
		{
			tsf_clickInterest(4, "tsf_interestControl_twoPoint");
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestControl_twoPoint").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage != 4 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10) { 
			tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_threepoint()
{
	if (app.toolbox.checkActiveToolSettingsMask("threepoint"))
	{
		app.ui.getWidget_byID("tsf_interestControl_threePoint").setProperty("visibility", "visible");
		if (tsf_currentSettingsPage == 5)
		{
			// app.ui.getWidget_byID("tsf_bodyControl_onePoint").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				//currentMaxLeft = app.ui.getWidget_byID("tsf_cont_sliderBox_spacing").getProperty("size-X");
			}
		}
		else if (tsf_currentSettingsPage != 5 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10)
		{
			tsf_clickInterest(5, "tsf_interestControl_threePoint");
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestControl_threePoint").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage != 5 && tsf_currentSettingsPage > 0 && tsf_currentSettingsPage <= 10) { 
			tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_rake()
{
	if (app.toolbox.checkActiveToolSettingsMask("rake"))
	{
		app.ui.getWidget_byID("tsf_interestRake").setProperty("visibility", "visible");
		if (tsf_currentSettingsPage == 30)
		{
			app.ui.getWidget_byID("tsf_bodyRake").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				//currentMaxLeft = app.ui.getWidget_byID("tsf_cont_sliderBox_spacing").getProperty("size-X");
				tsf_updateCheckbox("tsf_rake_toggle_relativeSize", 5601, -1);
				tsf_updateCheckbox("tsf_rake_toggle_pushToCanvas", 5602, -1);
				
				currentMaxLeft = app.ui.getWidget_byID("tsf_rake_sliderBox_size").getProperty("size-X");
				app.ui.getWidget_byID("tsf_rake_slider_size").setProperty("left", 
					app.toolbox.getActiveToolProp(5600, -1, true, false) * (currentMaxLeft - tsf_inputSlider_minMax_width));
				app.ui.getWidget_byID("tsf_rake_size").setProperty("value", 
					toString(app.toolbox.getActiveToolProp(5600, -1, false, false)));
					
				// Size Dynamics Sliders
				tsf_updateCheckbox("tsf_rake_toggle_sizeDynamic", 5603, -1);
				
				currentMaxLeft = app.ui.getWidget_byID("tsf_rake_sliderBox_sizeTotal").getProperty("size-X");
				
				app.ui.getWidget_byID("tsf_rake_slider_sizeTotalMin").setProperty("left", 
					app.toolbox.getActiveToolProp(5604, -1, true, false) * (currentMaxLeft - tsf_inputSlider_minMax_width));
				app.ui.getWidget_byID("tsf_rake_sizeTotalMin").setProperty("value", 
					toString(app.toolbox.getActiveToolProp(5604, -1, false, false)));
				app.ui.getWidget_byID("tsf_rake_slider_sizeTotalMax").setProperty("left", 
					app.toolbox.getActiveToolProp(5605, -1, true, false) * (currentMaxLeft - tsf_inputSlider_minMax_width));
				app.ui.getWidget_byID("tsf_rake_sizeTotalMin").setProperty("value", 
					toString(app.toolbox.getActiveToolProp(5605, -1, false, false)));
				app.ui.getWidget_byID("tsf_rake_sizeTotalBias").setProperty("value", 
					toString(app.toolbox.getActiveToolProp(5606, -1, false, false)));
					
				currentMaxLeft = app.ui.getWidget_byID("tsf_rake_sliderBox_sizeNoise").getProperty("size-X");
				
				app.ui.getWidget_byID("tsf_rake_slider_sizeNoiseMin").setProperty("left", 
					app.toolbox.getActiveToolProp(5607, -1, true, false) * (currentMaxLeft - tsf_inputSlider_minMax_width));
				app.ui.getWidget_byID("tsf_rake_sizeNoiseMin").setProperty("value", 
					toString(app.toolbox.getActiveToolProp(5607, -1, false, false)));
				app.ui.getWidget_byID("tsf_rake_slider_sizeNoiseMax").setProperty("left", 
					app.toolbox.getActiveToolProp(5608, -1, true, false) * (currentMaxLeft - tsf_inputSlider_minMax_width));
				app.ui.getWidget_byID("tsf_rake_sizeNoiseMax").setProperty("value", 
					toString(app.toolbox.getActiveToolProp(5608, -1, false, false)));
				app.ui.getWidget_byID("tsf_rake_sizeNoiseBias").setProperty("value", 
					toString(app.toolbox.getActiveToolProp(5609, -1, false, false)));
			}
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestRake").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage != 30) { 
			tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_basic()
{
	if (app.toolbox.checkActiveToolSettingsMask("basic"))
	{
		app.ui.getWidget_byID("tsf_interestBasic").setProperty("visibility", "visible");
		
		if (tsf_currentSettingsPage == 11)
		{
			app.ui.getWidget_byID("tsf_bodyBasic").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				//currentMaxLeft = app.ui.getWidget_byID("tsf_alpha_sliderBox_opacity").getProperty("size-X");
			}
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestBasic").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage == 11) { tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_image()
{
	if (app.toolbox.checkActiveToolSettingsMask("image"))
	{
		app.ui.getWidget_byID("tsf_interestImage").setProperty("visibility", "visible");
		if (app.toolbox.getActiveToolInterest("image")) { 
			app.ui.getWidget_byID("tsf_interestImage").setChildProperty_byClass("tsf_interestCheck", "fill-color", global::midGrey); }
		else { app.ui.getWidget_byID("tsf_interestImage").setChildProperty_byClass("tsf_interestCheck", "fill-color", global::slateGrey); }
		
		if (tsf_currentSettingsPage == 12)
		{
			app.ui.getWidget_byID("tsf_bodyImage").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				// Tip Size
				currentMaxLeft = app.ui.getWidget_byID("tsf_image_sliderBox_tipSize").getProperty("size-X");
				
				app.ui.getWidget_byID("tsf_image_slider_tipSize").setProperty("left", 
					app.toolbox.getActiveToolProp(2201, -1, true, false) * (currentMaxLeft - tsf_inputSlider_minMax_width));
				app.ui.getWidget_byID("tsf_image_tipSize").setProperty("value", 
					app.toolbox.getActiveToolProp(2201, -1, false, false));
					
				// Tip Spacing
				currentMaxLeft = app.ui.getWidget_byID("tsf_image_sliderBox_spacing").getProperty("size-X");
				
				app.ui.getWidget_byID("tsf_image_slider_spacing").setProperty("left", 
					app.toolbox.getActiveToolProp(2203, -1, true, false) * (currentMaxLeft - tsf_inputSlider_minMax_width));
				app.ui.getWidget_byID("tsf_image_spacing").setProperty("value", 
					app.toolbox.getActiveToolProp(2203, -1, false, false));
					
				// Toggle Boxes
				tsf_updateCheckbox("tsf_image_toggle_relativeSpacing", 2202, -1);
			}
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestImage").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage == 12) { tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_character()
{
	if (app.toolbox.checkActiveToolSettingsMask("character"))
	{
		app.ui.getWidget_byID("tsf_interestCharacter").setProperty("visibility", "visible");
		if (app.toolbox.getActiveToolInterest("character")) { 
			app.ui.getWidget_byID("tsf_interestCharacter").setChildProperty_byClass("tsf_interestCheck", "fill-color", global::midGrey); }
		else { app.ui.getWidget_byID("tsf_interestCharacter").setChildProperty_byClass("tsf_interestCheck", "fill-color", global::slateGrey); }
		
		if (tsf_currentSettingsPage == 13)
		{
			app.ui.getWidget_byID("tsf_bodyCharacter").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
			
				// Scale
				update_tSetToggle("tsf_character_tog_scaleControl", 2300, 1);
				update_tSetToggle("tsf_character_tog_scaleNoise", 2302, 1);
				
				update_tSetSliderDouble("tsf_character_sliderBox_scale", 
					"tsf_character_slider_scaleMin", "tsf_character_scaleMin", "tsf_character_slider_scaleMax", "tsf_character_scaleMax",
					2300, 3, 2300, 4);
				
				// Size X / Y
				update_tSetToggle("tsf_character_tog_sizeXControl", 2303, 1);
				update_tSetToggle("tsf_character_tog_sizeXNoise", 2305, 1);
				
				update_tSetSliderDouble("tsf_character_sliderBox_sizeX", 
					"tsf_character_slider_sizeXMin", "tsf_character_sizeXMin", "tsf_character_slider_sizeXMax", "tsf_character_sizeXMax",
					2303, 3, 2303, 4);
					
				update_tSetToggle("tsf_character_tog_sizeYControl", 2306, 1);
				update_tSetToggle("tsf_character_tog_sizeYNoise", 2308, 1);
				
				update_tSetSliderDouble("tsf_character_sliderBox_sizeY", 
					"tsf_character_slider_sizeYMin", "tsf_character_sizeYMin", "tsf_character_slider_sizeYMax", "tsf_character_sizeYMax",
					2306, 3, 2306, 4);
				
				// Rotation
				update_tSetToggle("tsf_character_tog_rotationLast", 2323, 1);
				
				update_tSetToggle("tsf_character_tog_rotationControl", 2320, 1);
				update_tSetToggle("tsf_character_tog_rotationNoise", 2322, 1);
				
				update_tSetSliderDouble("tsf_character_sliderBox_rotation", 
					"tsf_character_slider_rotationMin", "tsf_character_rotationMin", "tsf_character_slider_rotationMax", "tsf_character_rotationMax",
					2320, 3, 2320, 4);
				
				// Skew X / Y
				update_tSetToggle("tsf_character_tog_skewXControl", 2330, 1);
				update_tSetToggle("tsf_character_tog_skewXNoise", 2332, 1);
				
				update_tSetSliderDouble("tsf_character_sliderBox_skewX", 
					"tsf_character_slider_skewXMin", "tsf_character_skewXMin", "tsf_character_slider_skewXMax", "tsf_character_skewXMax",
					2330, 3, 2330, 4);
					
				update_tSetToggle("tsf_character_tog_skewYControl", 2333, 1);
				update_tSetToggle("tsf_character_tog_skewYNoise", 2335, 1);
				
				update_tSetSliderDouble("tsf_character_sliderBox_skewY", 
					"tsf_character_slider_skewYMin", "tsf_character_skewYMin", "tsf_character_slider_skewYMax", "tsf_character_skewYMax",
					2333, 3, 2333, 4);
					
				// Shuffle A / B
				update_tSetToggle("tsf_character_tog_shuffleAv1", 2343, 1);
				update_tSetToggle("tsf_character_tog_shuffleAv2", 2344, 1);
				update_tSetToggle("tsf_character_tog_shuffleAv3", 2345, 1);
				update_tSetToggle("tsf_character_tog_shuffleAv4", 2345, 1);
				
				update_tSetToggle("tsf_character_tog_shuffleAControl", 2340, 1);
				update_tSetToggle("tsf_character_tog_shuffleANoise", 2342, 1);
				
				update_tSetSliderDouble("tsf_character_sliderBox_shuffleA", 
					"tsf_character_slider_shuffleAMin", "tsf_character_shuffleAMin", "tsf_character_slider_shuffleAMax", "tsf_character_shuffleAMax",
					2340, 3, 2340, 4);
				
				
				update_tSetToggle("tsf_character_tog_shuffleBv1", 2353, 1);
				update_tSetToggle("tsf_character_tog_shuffleBv2", 2354, 1);
				update_tSetToggle("tsf_character_tog_shuffleBv3", 2355, 1);
				update_tSetToggle("tsf_character_tog_shuffleBv4", 2356, 1);
				
				update_tSetToggle("tsf_character_tog_shuffleBControl", 2350, 1);
				update_tSetToggle("tsf_character_tog_shuffleBNoise", 2352, 1);
				
				update_tSetSliderDouble("tsf_character_sliderBox_shuffleB", 
					"tsf_character_slider_shuffleBMin", "tsf_character_shuffleBMin", "tsf_character_slider_shuffleBMax", "tsf_character_shuffleBMax",
					2350, 3, 2350, 4);
					
				// Spread
				app.ui.getWidget_byID("tsf_character_spreadCornerText").setProperty("value", app.toolbox.getActiveToolProp(2363, -1, false, false));
				global::update_tSetSliderSingle("tsf_character_sliderBox_spreadSym", 
					"tsf_character_slider_spreadSym", "tsf_character_spreadSym", 2364, -1);
					
				update_tSetToggle("tsf_character_tog_spreadControl", 2360, 1);
				update_tSetToggle("tsf_character_tog_spreadNoise", 2362, 1);
				
				update_tSetSliderDouble("tsf_character_sliderBox_spread", 
					"tsf_character_slider_spreadMin", "tsf_character_spreadMin", "tsf_character_slider_spreadMax", "tsf_character_spreadMax",
					2360, 3, 2360, 4);
				
				// Flip X / Y
				update_tSetToggle("tsf_character_tog_flipX", 2380, 1);
				update_tSetToggle("tsf_character_tog_flipY", 2381, 1);
			
			}
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestCharacter").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage == 13) { tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_alpha()
{
	if (app.toolbox.checkActiveToolSettingsMask("alpha"))
	{
		app.ui.getWidget_byID("tsf_interestAlpha").setProperty("visibility", "visible");
		if (app.toolbox.getActiveToolInterest("alpha")) { 
			app.ui.getWidget_byID("tsf_interestAlpha").setChildProperty_byClass("tsf_interestCheck", "fill-color", global::midGrey); }
		else { app.ui.getWidget_byID("tsf_interestAlpha").setChildProperty_byClass("tsf_interestCheck", "fill-color", global::slateGrey); }
		
		if (tsf_currentSettingsPage == 15)
		{
			app.ui.getWidget_byID("tsf_bodyAlpha").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				update_tSetToggle("tsf_alpha_tog_opacityControl", 2800, 1);
				update_tSetToggle("tsf_alpha_tog_opacityNoise", 2802, 1);
				update_tSetToggle("tsf_alpha_tog_flowControl", 2803, 1);
				update_tSetToggle("tsf_alpha_tog_flowNoise", 2805, 1);
				
				update_tSetSliderDouble("tsf_alpha_sliderBox_opacity", 
					"tsf_alpha_slider_opacityMin", "tsf_alpha_opacityMin", "tsf_alpha_slider_opacityMax", "tsf_alpha_opacityMax", 
					2800, 3, 2800, 4);
				update_tSetSliderDouble("tsf_alpha_sliderBox_flow", 
					"tsf_alpha_slider_flowMin", "tsf_alpha_flowMin", "tsf_alpha_slider_flowMax", "tsf_alpha_flowMax", 
					2803, 3, 2803, 4);
			}
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestAlpha").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage == 15) { tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_color()
{
	if (app.toolbox.checkActiveToolSettingsMask("color"))
	{
		app.ui.getWidget_byID("tsf_interestColor").setProperty("visibility", "visible");
		if (app.toolbox.getActiveToolInterest("color")) { 
			app.ui.getWidget_byID("tsf_interestColor").setChildProperty_byClass("tsf_interestCheck", "fill-color", global::midGrey); }
		else { app.ui.getWidget_byID("tsf_interestColor").setChildProperty_byClass("tsf_interestCheck", "fill-color", global::slateGrey); }
		
		if (tsf_currentSettingsPage == 16)
		{
			app.ui.getWidget_byID("tsf_bodyColor").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				app.ui.getWidget_byID("tsf_color_finalTypeText").setProperty("value", app.toolbox.getActiveToolProp(2777, -1, false, false));
				update_tSetToggle("tsf_color_tog_finalDynamics", 2778, -1);
				update_tSetToggle("tsf_color_tog_finalControlRed", 2770, 1);
				update_tSetToggle("tsf_color_tog_finalNoiseRed", 2774, 1);
				update_tSetToggle("tsf_color_tog_finalControlGreen", 2771, 1);
				update_tSetToggle("tsf_color_tog_finalNoiseGreen", 2775, 1);
				update_tSetToggle("tsf_color_tog_finalControlBlue", 2772, 1);
				update_tSetToggle("tsf_color_tog_finalNoiseBlue", 2776, 1);
				
			
				update_tSetToggle("tsf_color_tog_enableMixColor", 2709, -1);
				update_tSetToggle("tsf_color_tog_mixColorControl", 2700, 1);
				update_tSetToggle("tsf_color_tog_mixColorNoise", 2702, 1);
				app.ui.getWidget_byID("tsf_color_mixColorTypeText").setProperty("value", app.toolbox.getActiveToolProp(2710, -1, false, false));
				
				
				update_tSetSliderDouble("tsf_color_sliderBox_mixColor", 
					"tsf_color_slider_mixColorMin", "tsf_color_mixColorMin", "tsf_color_slider_mixColorMax", "tsf_color_mixColorMax", 
					2700, 3, 2700, 4);
				
				app.ui.getWidget_byID("tsf_color_colorModeText").setProperty("value", app.toolbox.getActiveToolProp(2703, -1, false, false));
				global::update_tSetSliderSingle("tsf_color_sliderBox_colorHueOffset", 
					"tsf_color_slider_colorHueOffset", "tsf_color_colorHueOffset", 2706, -1);
				global::update_tSetSliderSingle("tsf_color_sliderBox_colorSatOffset", 
					"tsf_color_slider_colorSatOffset", "tsf_color_colorSatOffset", 2707, -1);
				global::update_tSetSliderSingle("tsf_color_sliderBox_colorValueOffset", 
					"tsf_color_slider_colorValueOffset", "tsf_color_colorValueOffset", 2708, -1);
					
				app.ui.getWidget_byID("tsf_color_colorTypeText").setProperty("value", app.toolbox.getActiveToolProp(2727, -1, false, false));
				update_tSetToggle("tsf_color_tog_mixColorDynamics", 2728, -1);
				update_tSetToggle("tsf_color_tog_colorControlRed", 2720, 1);
				update_tSetToggle("tsf_color_tog_colorNoiseRed", 2724, 1);
				update_tSetToggle("tsf_color_tog_colorControlGreen", 2721, 1);
				update_tSetToggle("tsf_color_tog_colorNoiseGreen", 2725, 1);
				update_tSetToggle("tsf_color_tog_colorControlBlue", 2722, 1);
				update_tSetToggle("tsf_color_tog_colorNoiseBlue", 2726, 1);
			}
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestColor").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage == 16) { tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_scatter()
{
	if (app.toolbox.checkActiveToolSettingsMask("scatter"))
	{
		app.ui.getWidget_byID("tsf_interestScatter").setProperty("visibility", "visible");
		if (app.toolbox.getActiveToolInterest("scatter")) { 
			app.ui.getWidget_byID("tsf_interestScatter").setChildProperty_byClass("tsf_interestCheck", "fill-color", global::midGrey); }
		else { app.ui.getWidget_byID("tsf_interestScatter").setChildProperty_byClass("tsf_interestCheck", "fill-color", global::slateGrey); }
		
		if (tsf_currentSettingsPage == 17)
		{
			app.ui.getWidget_byID("tsf_bodyScatter").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				update_tSetToggle("tsf_scatter_tog_angleEnable", 2660, 1);
				update_tSetToggle("tsf_scatter_tog_useDir", 2661, 1);
				
				global::update_tSetSliderSingle("tsf_scatter_sliderBox_angleOffset", 
					"tsf_scatter_slider_angleOffset", "tsf_scatter_angleOffset", 2663, -1);
				update_tSetToggle("tsf_scatter_tog_dirRelative", 2662, 1);
				
				update_tSetToggle("tsf_scatter_tog_angleControl", 2600, 1);
				update_tSetToggle("tsf_scatter_tog_angleNoise", 2602, 1);
				update_tSetSliderDouble("tsf_scatter_sliderBox_angle", 
					"tsf_scatter_slider_angleMin", "tsf_scatter_angleMin", "tsf_scatter_slider_angleMax", "tsf_scatter_angleMax", 
					2600, 3, 2600, 4);
					
				update_tSetToggle("tsf_scatter_tog_distXControl", 2610, 1);
				update_tSetToggle("tsf_scatter_tog_distXNoise", 2612, 1);
				update_tSetSliderDouble("tsf_scatter_sliderBox_distX", 
					"tsf_scatter_slider_distXMin", "tsf_scatter_distXMin", "tsf_scatter_slider_distXMax", "tsf_scatter_distXMax", 
					2610, 3, 2610, 4);
					
				update_tSetToggle("tsf_scatter_tog_distYControl", 2620, 1);
				update_tSetToggle("tsf_scatter_tog_distYNoise", 2622, 1);
				update_tSetSliderDouble("tsf_scatter_sliderBox_distY", 
					"tsf_scatter_slider_distYMin", "tsf_scatter_distYMin", "tsf_scatter_slider_distYMax", "tsf_scatter_distYMax", 
					2620, 3, 2620, 4);
					
				update_tSetToggle("tsf_scatter_tog_countControl", 2630, 1);
				update_tSetToggle("tsf_scatter_tog_countNoise", 2632, 1);
				update_tSetSliderDouble("tsf_scatter_sliderBox_count", 
					"tsf_scatter_slider_countMin", "tsf_scatter_countMin", "tsf_scatter_slider_countMax", "tsf_scatter_countMax", 
					2630, 3, 2630, 4);
				
			}
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestScatter").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage == 17) { tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}

void update_effects()
{
	if (app.toolbox.checkActiveToolSettingsMask("effects"))
	{
		app.ui.getWidget_byID("tsf_interestEffects").setProperty("visibility", "visible");
		if (app.toolbox.getActiveToolInterest("effects")) { 
			app.ui.getWidget_byID("tsf_interestEffects").setChildProperty_byClass("tsf_interestCheck", "fill-color", global::midGrey); }
		else { app.ui.getWidget_byID("tsf_interestEffects").setChildProperty_byClass("tsf_interestCheck", "fill-color", global::slateGrey); }
		
		if (tsf_currentSettingsPage == 24)
		{
			app.ui.getWidget_byID("tsf_bodyEffects").setProperty("visibility", "visible");
			if (true) // If the page is dirty, update it
			{
				app.ui.sortTargetWidgetChildren_byMacro("tsf_effects_scrollBox_list", "id", "effectsOrdering", true);
				// Update enable/disable buttons
				tsf_updateCheckbox("tsf_fx_toggle_fill", 8010, -1);
				tsf_updateCheckbox("tsf_fx_toggle_gradient", 8011, -1);
				tsf_updateCheckbox("tsf_fx_toggle_posterize", 8012, -1);
				tsf_updateCheckbox("tsf_fx_toggle_invert", 8013, -1);
				tsf_updateCheckbox("tsf_fx_toggle_threshold", 8014, -1);
				tsf_updateCheckbox("tsf_fx_toggle_contrast", 8015, -1);
				tsf_updateCheckbox("tsf_fx_toggle_hsv", 8016, -1);
				tsf_updateCheckbox("tsf_fx_toggle_power", 8017, -1);
				tsf_updateCheckbox("tsf_fx_toggle_modulo", 8018, -1);
				tsf_updateCheckbox("tsf_fx_toggle_blur", 8024, -1);
				// Total Blend
				currentMaxLeft = app.ui.getWidget_byID("tsf_effects_sliderBox_totalMix").getProperty("size-X");
				
				app.ui.getWidget_byID("tsf_effects_slider_totalMix").setProperty("left", 
					app.toolbox.getActiveToolProp(8050, -1, true, false) * (currentMaxLeft - tsf_inputSlider_minMax_width));
				app.ui.getWidget_byID("tsf_effects_totalMix").setProperty("value", 
					app.toolbox.getActiveToolProp(8050, -1, false, false));
					
				// Total Blend Alpha Mask
				currentMaxLeft = app.ui.getWidget_byID("tsf_effects_sliderBox_alphaMask").getProperty("size-X");
				
				app.ui.getWidget_byID("tsf_effects_slider_alphaMaskMin").setProperty("left", 
					app.toolbox.getActiveToolProp(8051, -1, true, false) * (currentMaxLeft - tsf_inputSlider_minMax_width));
				app.ui.getWidget_byID("tsf_effects_alphaMaskMin").setProperty("value", 
					toString(app.toolbox.getActiveToolProp(8051, -1, false, false)));
				app.ui.getWidget_byID("tsf_effects_slider_alphaMaskMax").setProperty("left", 
					app.toolbox.getActiveToolProp(8052, -1, true, false) * (currentMaxLeft - tsf_inputSlider_minMax_width));
				app.ui.getWidget_byID("tsf_effects_alphaMaskMax").setProperty("value", 
					toString(app.toolbox.getActiveToolProp(8052, -1, false, false)));
					
				// Hide All FX bodies
				clearActiveEffectsItem();
			}
		}
	}
	else 
	{ 
		app.ui.getWidget_byID("tsf_interestEffects").setProperty("visibility", "hidden"); 
		if (tsf_currentSettingsPage == 24) { tsf_clickInterest(0, "tsf_interestMetadata"); } 
	}
}