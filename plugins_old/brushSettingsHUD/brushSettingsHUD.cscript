array num darkGrey = {0.25, 0.25, 0.25, 1.0};
array num lowMidGrey = {0.33, 0.33, 0.33, 1.0};
array num midGrey = {0.52, 0.52, 0.52, 1.0};
array num highMidGrey = {0.68, 0.68, 0.68, 1.0};
array num lightGrey = {0.82, 0.82, 0.82, 1.0};

num maxSliderLeft = 144;
num sliderOffset = 6;

bool sliderBeingDragged = false;
num sizeLeft = 0;
num vertSpacingLeft = 0;
num brushSpacingLeft = 0;

bool percentBeingDragged = false;
num startY = 0;
num startMinOpacity = 0;
num startMaxOpacity = 0;
num startMinFlow = 0;
num startMaxFlow = 0;

num minSliderVal = 1.2;
num maxSize = 180;
num maxSpacing = 120;

bool opacityEnable = true;
bool flowEnable = true;

array num spopOffset = {0, 0};

void movePopup(num select)
{
	if (select == 0)
	{
		spopOffset = getMousePos_relative();
	}
	else if (select == 1)
	{
		array num pos = getMousePos();
		app.ui.getWidget_byID("bshud_wrapper").setPosition(pos[0] - spopOffset[0], pos[1] - spopOffset[1]);
	}
}

void dragSettings(num type, num select)
{
	num xpos = clamp(getMousePos_relative()[0] - sliderOffset, 0, maxSliderLeft);
	if (type == 0)
	{
		sliderBeingDragged = true;
		if (select == 0) { setChildProperty_byID("sizeSlider", "left", xpos); sizeLeft = xpos; }
		else if (select == 1) { setChildProperty_byID("vertexSpacingSlider", "left", xpos); vertSpacingLeft = xpos; }
		else if (select == 2) { setChildProperty_byID("brushSpacingSlider", "left", xpos); brushSpacingLeft = xpos; }
	}
	else if (type == 1)
	{
		sliderBeingDragged = false;
		if (select == 0) { app.toolbox.setActiveToolProp(2201, -1, lerp(sizeLeft / maxSliderLeft, minSliderVal, maxSize)); }
		else if (select == 1) { app.toolbox.setActiveToolProp(402, -1, lerp(vertSpacingLeft / maxSliderLeft, minSliderVal, maxSpacing)); }
		else if (select == 2) { app.toolbox.setActiveToolProp(2203, -1, lerp(brushSpacingLeft / maxSliderLeft, minSliderVal, maxSpacing)); }
	}
}

void dragPercents(num type, num select)
{
	if (type == 0)
	{
		
		percentBeingDragged = true;
		startY = getMousePos()[1];
		if (select == 0) 
		{
			try {
			startMinOpacity = app.toolbox.getActiveToolProp(2801, -1);
			} catch {}
		}
		else if (select == 1)
		{
			try {
			startMaxOpacity = app.toolbox.getActiveToolProp(2802, -1);
			} catch {}
		}
		else if (select == 2)
		{
			try {
			startMinFlow = app.toolbox.getActiveToolProp(2811, -1);
			} catch {}
		}
		else if (select == 3)
		{
			try {
			startMaxFlow = app.toolbox.getActiveToolProp(2812, -1);
			} catch {}
		}
	}
	if (type == 1 || type == 0)
	{
		try {
			num ypos = getMousePos()[1];
			if (select == 0) 
			{
				if (?(num)startMinOpacity)
				{
					num outValue = floor(clamp(startMinOpacity + (startY - ypos) * 0.01, 0, 1) * 100);
					app.toolbox.setActiveToolProp(2801, -1, outValue / 100);
					setChildProperty_byID("minOpacitySlider", "value", toString(outValue) + "%"); 
				}
			}
			else if (select == 1)
			{
				if (?(num)startMaxOpacity)
				{
					num outValue = floor(clamp(startMaxOpacity + (startY - ypos) * 0.01, 0, 1) * 100);
					app.toolbox.setActiveToolProp(2802, -1, outValue / 100);
					setChildProperty_byID("maxOpacitySlider", "value", toString(outValue) + "%"); 
				}
			}
			else if (select == 2)
			{
				if (?(num)startMinFlow)
				{
					num outValue = floor(clamp(startMinFlow + (startY - ypos) * 0.01, 0, 1) * 100);
					app.toolbox.setActiveToolProp(2811, -1, outValue / 100);
					setChildProperty_byID("minFlowSlider", "value", toString(outValue) + "%"); 
				}
			}
			else if (select == 3)
			{
				if (?(num)startMaxFlow)
				{
					num outValue = floor(clamp(startMaxFlow + (startY - ypos) * 0.01, 0, 1) * 100);
					app.toolbox.setActiveToolProp(2812, -1, outValue / 100);
					setChildProperty_byID("maxFlowSlider", "value", toString(outValue) + "%"); 
				}
			}
		} catch { print "Bad Setting Fetch!"; }
	}
	else if (type == 2)
	{
		percentBeingDragged = false;
	}
}

void toggleCheck(num type)
{
	print "BSH TOGGLE CHECK";
	if (type == 0)
	{
		opacityEnable = !opacityEnable;
		app.toolbox.setActiveToolProp(2800, -1, opacityEnable);
		if (opacityEnable)
		{
			setChildProperty_byID("opacityDynamic", "background-color", lightGrey);
		}
		else
		{
			setChildProperty_byID("opacityDynamic", "background-color", darkGrey);
		}
	}
	if (type == 1)
	{
		flowEnable = !flowEnable;
		app.toolbox.setActiveToolProp(2810, -1, flowEnable);
		if (flowEnable)
		{
			setChildProperty_byID("flowDynamic", "background-color", lightGrey);
		}
		else
		{
			setChildProperty_byID("flowDynamic", "background-color", darkGrey);
		}
	}
}

void updateOnToolSwitch()
{
	// Always verify the settings mask for safety
	if (app.toolbox.checkActiveToolSettingsMask("image"))
	{
		num size = app.toolbox.getActiveToolProp(2201, -1);
		app.ui.getWidget_byID("sizeSlider").setProperty("left", 
			((size - minSliderVal) / (maxSize - minSliderVal)) * maxSliderLeft);
		sizeLeft = app.ui.getWidget_byID("sizeSlider").getProperty("left");
		
		num brushSpacing = app.toolbox.getActiveToolProp(2203, -1);
		app.ui.getWidget_byID("brushSpacingSlider").setProperty("left", 
			((brushSpacing - minSliderVal) / (maxSpacing - minSliderVal)) * maxSliderLeft);
		brushSpacingLeft = app.ui.getWidget_byID("brushSpacingSlider").getProperty("left");
	}
	
	// Always verify the settings mask for safety
	if (app.toolbox.checkActiveToolSettingsMask("continuous"))
	{
		num vertSpacing = app.toolbox.getActiveToolProp(402, -1);
		app.ui.getWidget_byID("vertexSpacingSlider").setProperty("left", 
			((vertSpacing - minSliderVal) / (maxSpacing - minSliderVal)) * maxSliderLeft);
		vertSpacingLeft = app.ui.getWidget_byID("vertexSpacingSlider").getProperty("left");
	}
	
	// Always verify the settings mask for safety
	if (app.toolbox.checkActiveToolSettingsMask("alpha"))
	{
		bool usePressureOpacity = app.toolbox.getActiveToolProp(2800, -1);
		opacityEnable = usePressureOpacity;
		if (opacityEnable)
		{
			app.ui.getWidget_byID("opacityDynamic").setProperty("background-color", lightGrey);
		}
		else
		{
			app.ui.getWidget_byID("opacityDynamic").setProperty("background-color", darkGrey);
		}
		
		num minOp = app.toolbox.getActiveToolProp(2801, -1);
		app.ui.getWidget_byID("minOpacitySlider").setProperty("value", toString(floor(minOp * 100)) + "%");
		
		num maxOp = app.toolbox.getActiveToolProp(2802, -1);
		app.ui.getWidget_byID("maxOpacitySlider").setProperty("value", toString(floor(maxOp * 100)) + "%"); 
		
		bool usePressureFlow = app.toolbox.getActiveToolProp(2810, -1);
		flowEnable = usePressureFlow;
		if (flowEnable)
		{
			app.ui.getWidget_byID("flowDynamic").setProperty("background-color", lightGrey);
		}
		else
		{
			app.ui.getWidget_byID("flowDynamic").setProperty("background-color", darkGrey);
		}
		
		num minFl = app.toolbox.getActiveToolProp(2811, -1);
		app.ui.getWidget_byID("minFlowSlider").setProperty("value", toString(floor(minFl * 100)) + "%"); 
		
		num maxFl = app.toolbox.getActiveToolProp(2812, -1);
		app.ui.getWidget_byID("maxFlowSlider").setProperty("value", toString(floor(maxFl * 100)) + "%"); 
	}
}

bindCallbackEvent("toolSwitch", "bshud_updateCB", updateOnToolSwitch);